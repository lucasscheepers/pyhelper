version: 0.2
run-as: root

env:
  secrets-manager:
    ARNROLE: codebuild:arnrole
    ECRURI: codebuild:ecruripyhelper
    SONARORGANIZATION: codebuild:sonarorganization
    SONARPROJECTKEY: codebuild:sonarprojectkeypyhelper
    SONARLOGIN: codebuild:sonarlogin

phases:

  install:
    commands:
      - git --version
      - echo Installing app dependencies...
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
      - unzip sonar-scanner-cli-3.3.0.1492-linux.zip
      - export PATH=$PATH:./sonar-scanner-3.3.0.1492-linux/bin/
      - pip install -r tests/test-requirements.txt
      - chmod +x prereqs.sh
      - sh prereqs.sh
      - source ~/.bashrc
      - echo Check kubectl version
      - kubectl version --short --client
      - echo Installing git-crypt...
      - curl https://www.agwa.name/projects/git-crypt/downloads/git-crypt-0.6.0.tar.gz --output git-crypt.tar.gz
      - tar xvzf git-crypt.tar.gz -C .
      - cd git-crypt-0.6.0
      - make
      - make install
      - cd ..
      - echo Downloading the key to decrypt the files
      - aws s3 cp s3://s3-mattermost-iv/pyhelper-key.kbx pyhelper-key.kbx
      - echo Decrypting the files
      - git clone https://github.com/lucasscheepers/pyhelper.git
      - cd pyhelper
      - git-crypt unlock ../pyhelper-key.kbx
      - cp deployment.yml ../deployment.yml
      - cd ..
      - aws s3 cp s3://s3-mattermost-iv/pyhelper.env .env
      - aws s3 cp s3://s3-mattermost-iv/pyhelper.testing-env .testing-env

  pre_build:
    commands:
      - echo Logging in to Amazon EKS...
      - aws eks --region eu-west-2 update-kubeconfig --name prod-cluster
      - aws eks update-kubeconfig --name prod-cluster --region eu-west-2 --role-arn $ARNROLE
      - echo Check config
      - kubectl config view
      - echo Check kubectl access
      - kubectl get svc
      - echo 'Logging in to Amazon ECR...'
      - $(aws ecr get-login --region eu-west-2 --no-include-email)
      - echo Tests started on `date`
      - docker-compose -f tests/integration_tests/docker-compose.yml up -d --build && sleep 30
      - docker-compose up -d --build && sleep 30
      - coverage run -m pytest -rap --junitxml coverage.xml
      - coverage xml -i
      - echo Sonar scanner started on `date`
      - sonar-scanner -Dsonar.organization=$SONARORGANIZATION -Dsonar.projectKey=$SONARPROJECTKEY -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONARLOGIN

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $ECRURI:latest .
      - docker tag $ECRURI:latest $ECRURI:$CODEBUILD_BUILD_NUMBER

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images
      - docker push $ECRURI:latest
      - docker push $ECRURI:$CODEBUILD_BUILD_NUMBER
      - echo Push the latest image to cluster
      # - kubectl delete -n ind-iv -f deployment.yml
      - kubectl apply -n ind-iv -f deployment.yml
